// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid()) @db.Uuid
  name       String   @db.VarChar(50)
  email      String   @unique @db.VarChar(320)
  role       String   @default("USER") @db.VarChar(20)
  password   String   @db.VarChar(72)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)
  Coach      Coach?

  CreditPurchases CreditPurchase[]
  CourseBookings  CourseBooking[]

  @@map("user")
}

model Coach {
  id                String   @id @default(uuid()) @db.Uuid
  user_id           String   @unique @db.Uuid
  experience_years  Int
  description       String   @db.Text
  profile_image_url String   @db.VarChar(2048)
  created_at        DateTime @default(now()) @db.Timestamp(6)
  updated_at        DateTime @updatedAt @db.Timestamp(6)

  user    User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  courses Course[]

  @@map("coach")
}

model Skill {
  id         String   @id @default(uuid()) @db.Uuid
  name       String   @unique @db.VarChar(50)
  created_at DateTime @default(now()) @db.Timestamp(6)
  courses    Course[]

  @@map("skill")
}

model CreditPackage {
  id             String           @id @default(uuid()) @db.Uuid
  name           String           @unique @db.VarChar(50)
  credit_amount  Int
  price          Decimal          @db.Decimal(10, 2)
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  CreditPurchase CreditPurchase[]

  @@map("credit_package")
}

model Course {
  id               String   @id @default(uuid()) @db.Uuid
  user_id          String   @db.Uuid
  skill_id         String   @db.Uuid
  name             String   @db.VarChar(100)
  description      String   @db.Text
  start_at         DateTime @db.Timestamp(6)
  end_at           DateTime @db.Timestamp(6)
  max_participants Int
  meeting_url      String?  @db.VarChar(2048)
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @updatedAt @db.Timestamp(6)

  coach          Coach           @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  skill          Skill           @relation(fields: [skill_id], references: [id], onDelete: Cascade)
  CourseBookings CourseBooking[]

  @@map("course")
}

model CreditPurchase {
  id                String   @id @default(uuid()) @db.Uuid
  user_id           String   @db.Uuid
  credit_package_id String   @db.Uuid
  purchased_credits Int
  price_paid        Decimal  @db.Decimal(10, 2)
  created_at        DateTime @default(now()) @db.Timestamp(6)
  purchase_at       DateTime @default(now()) @db.Timestamp(6)

  user          User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  creditPackage CreditPackage @relation(fields: [credit_package_id], references: [id], onDelete: Cascade)

  @@map("credit_purchase")
}

model CourseBooking {
  id                  String    @id @default(uuid()) @db.Uuid
  user_id             String    @db.Uuid
  course_id           String    @db.Uuid
  booking_at          DateTime  @default(now()) @db.Timestamp(6)
  status              String    @db.VarChar(20)
  join_at             DateTime?
  leave_at            DateTime?
  cancelled_at        DateTime?
  cancellation_reason String?   @db.VarChar(255)
  created_at          DateTime  @default(now()) @db.Timestamp(6)

  user   User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course Course @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@map("course_booking")
}
